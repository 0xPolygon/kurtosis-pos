name: nightly

on:
  schedule:
    - cron: 0 6 * * * # Run this workflow every day at 6 AM Paris time (UTC+2).
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  id-token: write

env:
  ENCLAVE_NAME: pos

jobs:
  run-without-args:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Pre kurtosis run
        uses: ./.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}
          pull_images_from_gcr: "false"

      - name: Kurtosis run
        run: |
          set -o pipefail
          kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --verbosity detailed . 2>&1 | tee run.log

      - name: Extract timing information
        run: python3 .github/scripts/parse_timing.py run.log

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Test state syncs
        run: kurtosis service exec ${{ env.ENCLAVE_NAME }} test-runner "bats --filter 'bridge MATIC/POL from L1 to L2 and confirm L2 MATIC/POL balance increased' tests/pos/bridge.bats"

      - name: Monitor milestones and checkpoints
        uses: ./.github/actions/monitor-milestones-and-checkpoints
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}

      - name: Post kurtosis run
        if: always()
        uses: ./.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}

  list-ymls:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
      - id: set-matrix
        run: |
          file_paths=$(ls -R ./.github/configs/{*,*/*,*/*/*}.yml | grep -Ev "cl-el-genesis|external-l1")
          echo "file_paths=${file_paths}"

          matrix=$(echo "${file_paths}" | while read -r file_path; do
            file_name=$(basename -s ".yml" "${file_path}")
            folder_name=$(basename $(dirname "${file_path}"))
            if [[ "${folder_name}" == "nightly" ]]; then
              job_name="${file_name}"
            else
              job_name="${folder_name}-${file_name}"
            fi
            echo "{\"name\": \"$job_name\", \"path\": \"$file_path\"}"
          done | jq -s -c '.')
          echo "matrix=${matrix}"

          echo "matrix=${matrix}" >> $GITHUB_OUTPUT

  run-with-args:
    needs: list-ymls
    name: run-with-${{ matrix.file.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson(needs.list-ymls.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5

      - name: Pre kurtosis run
        uses: ./.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

      - name: Run Starlark
        run: |
          set -o pipefail
          kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --verbosity detailed --args-file=${{ matrix.file.path }} . 2>&1 | tee run.log

      - name: Extract timing information
        run: python3 .github/scripts/parse_timing.py run.log --config-file ${{ matrix.file.path }}

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Check if test runner is deployed
        id: check-test-runner
        run: |
          # The test runner is deployed by default.
          test_runner_deployed=true

          # Verify if additional services are defined and ensure the test runner is deployed.
          additional_services=$(yq '.polygon_pos_package.additional_services' ${{ matrix.file.path }})
          if [[ "${additional_services}" != "null" ]]; then
            is_test_runner_deployed=$(yq '.polygon_pos_package.additional_services | contains(["test_runner"])' ${{ matrix.file.path }})
            if [[ "${is_test_runner_deployed}" != "true" ]]; then
              test_runner_deployed=false
            fi
          fi

          echo "test_runner_deployed=${test_runner_deployed}" >> $GITHUB_OUTPUT

      - name: Test state syncs
        if: steps.check-test-runner.outputs.test_runner_deployed == 'true' && matrix.file.name != 'additional-services'
        run: kurtosis service exec ${{ env.ENCLAVE_NAME }} test-runner "bats --filter 'bridge MATIC/POL from L1 to L2 and confirm L2 MATIC/POL balance increased' tests/pos/bridge.bats"

      - name: Monitor milestones and checkpoints
        if: ${{ !contains(matrix.file.name, 'heimdall-v2-erigon') && !contains(matrix.file.name, 'additional-services') }} # TODO: Understand why checkpoints are not being created in this case.
        uses: ./.github/actions/monitor-milestones-and-checkpoints
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}
          args_filename: ${{ matrix.file.path }}

      - name: Post kurtosis run
        if: always()
        uses: ./.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}
          args_filename: ${{ matrix.file.name }}

  run-with-external-l1:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Pre kurtosis run
        uses: ./.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

      - name: Deploy L1
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --verbosity detailed --args-file ./.github/configs/nightly/external-l1/ethereum.yml --verbosity=DETAILED github.com/ethpandaops/ethereum-package@1bf08937f7ec376d5e281fef87dc1efc28aeefef # 2025-06-14 (>v5.0.1)

      - name: Deploy L2
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --verbosity detailed --args-file=./.github/configs/nightly/external-l1/polygon-pos-with-external-l1.yml .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Test state syncs
        run: kurtosis service exec ${{ env.ENCLAVE_NAME }} test-runner "bats --filter 'bridge MATIC/POL from L1 to L2 and confirm L2 MATIC/POL balance increased' tests/pos/bridge.bats"

      # TODO: Understand why checkpoints are not being created in this case.
      # - name: Monitor milestones and checkpoints
      #   uses: ./.github/actions/monitor-milestones-and-checkpoints
      #   with:
      #     enclave_name: ${{ env.ENCLAVE_NAME }}

      - name: Post kurtosis run
        if: always()
        uses: ./.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}
          args_filename: external-l1

  run-with-cl-el-genesis:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5

      - name: Pre kurtosis run
        uses: ./.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

      - name: Kurtosis run for the first time
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --verbosity detailed .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Retrieve L2 CL genesis file
        working-directory: .github/configs/nightly/cl-el-genesis
        run: |
          kurtosis files inspect ${{ env.ENCLAVE_NAME }} l2-cl-genesis genesis.json | jq > l2-cl-genesis.json
          jq . l2-cl-genesis.json

      - name: Retrieve L2 EL genesis file
        working-directory: .github/configs/nightly/cl-el-genesis
        run: |
          kurtosis files inspect ${{ env.ENCLAVE_NAME }} l2-el-genesis genesis.json | jq > l2-el-genesis.json
          jq . l2-el-genesis.json

      - name: Retrieve MATIC contract addresses
        working-directory: .github/configs/nightly/cl-el-genesis
        run: |
          kurtosis files inspect ${{ env.ENCLAVE_NAME }} matic-contract-addresses contractAddresses.json | jq > matic-contract-addresses.json
          jq . matic-contract-addresses.json

      - name: Stop L2 participants
        run: |
          kurtosis service stop ${{ env.ENCLAVE_NAME }} l2-cl-1-heimdall-v2-bor-validator
          kurtosis service stop ${{ env.ENCLAVE_NAME }} rabbitmq-l2-cl-1-validator
          kurtosis service stop ${{ env.ENCLAVE_NAME }} l2-el-1-bor-heimdall-v2-validator

      - name: Kurtosis run for the second time
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --verbosity detailed --args-file=./.github/configs/nightly/cl-el-genesis/polygon-pos-with-cl-el-genesis.yml .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Test state syncs
        run: kurtosis service exec ${{ env.ENCLAVE_NAME }} test-runner "bats --filter 'bridge MATIC/POL from L1 to L2 and confirm L2 MATIC/POL balance increased' tests/pos/bridge.bats"

      - name: Monitor milestones and checkpoints
        uses: ./.github/actions/monitor-milestones-and-checkpoints
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}

      - name: Post kurtosis run
        if: always()
        uses: ./.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}
          args_filename: cl-el-genesis
