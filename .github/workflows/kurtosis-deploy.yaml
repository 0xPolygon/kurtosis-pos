name: kurtosis-deploy

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  actions: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

env:
  ENCLAVE_NAME: pos

jobs:
  run-without-args:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Pre kurtosis run
        uses: ./.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

      - name: Kurtosis run
        run: |
          set -o pipefail
          kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --verbosity detailed . 2>&1 | tee run.log

      - name: Extract timing information
        run: python3 .github/scripts/parse_timing.py run.log

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Test state syncs
        run: kurtosis service exec ${{ env.ENCLAVE_NAME }} test-runner "bats --filter 'bridge MATIC/POL from L1 to L2 and confirm L2 MATIC/POL balance increased' tests/pos/bridge.bats"

      - name: Monitor milestones and checkpoints
        uses: ./.github/actions/monitor-milestones-and-checkpoints
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}

      - name: Post kurtosis run
        if: always()
        uses: ./.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}

  list-ymls:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
      - id: set-matrix
        run: |
          file_paths=$(ls -R ./.github/configs/{*,*/*}.yml | grep -Ev "nightly|stateless")
          echo "file_paths=${file_paths}"

          matrix=$(echo "${file_paths}" | while read -r file_path; do
            file_name=$(basename -s ".yml" "${file_path}")
            folder_name=$(basename $(dirname "${file_path}"))
            if [[ "${folder_name}" == "configs" ]]; then
              job_name="${file_name}"
            else
              job_name="${folder_name}-${file_name}"
            fi
            echo "{\"name\": \"$job_name\", \"path\": \"$file_path\"}"
          done | jq -s -c '.')
          echo "matrix=${matrix}"

          echo "matrix=${matrix}" >> $GITHUB_OUTPUT

  run-with-args:
    needs: [list-ymls]
    name: run-with-${{ matrix.file.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJson(needs.list-ymls.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v5

      - name: Pre kurtosis run
        uses: ./.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

      - name: Kurtosis run
        run: |
          set -o pipefail
          kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --verbosity detailed --args-file=${{ matrix.file.path }} . 2>&1 | tee run.log

      - name: Extract timing information
        run: python3 .github/scripts/parse_timing.py run.log --config-file=${{ matrix.file.path }}

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Check if test runner is deployed
        id: check-test-runner
        run: |
          # The test runner is deployed by default.
          test_runner_deployed=true

          # Verify if additional services are defined and ensure the test runner is deployed.
          additional_services=$(yq '.polygon_pos_package.additional_services' ${{ matrix.file.path }})
          if [[ "${additional_services}" != "null" ]]; then
            is_test_runner_deployed=$(yq '.polygon_pos_package.additional_services | contains(["test_runner"])' ${{ matrix.file.path }})
            if [[ "${is_test_runner_deployed}" != "true" ]]; then
              test_runner_deployed=false
            fi
          fi

          echo "test_runner_deployed=${test_runner_deployed}" >> $GITHUB_OUTPUT

      - name: Test state syncs
        if: steps.check-test-runner.outputs.test_runner_deployed == 'true' && !contains(matrix.file.name, 'additional-services')
        run: kurtosis service exec ${{ env.ENCLAVE_NAME }} test-runner "bats --filter 'bridge MATIC/POL from L1 to L2 and confirm L2 MATIC/POL balance increased' tests/pos/bridge.bats"

      - name: Monitor milestones and checkpoints
        # TODO: Understand why checkpoints are not being created in heimdall-v2/erigon devnets.
        if: ${{ !contains(matrix.file.name, 'heimdall-v2-erigon') && !contains(matrix.file.name, 'additional-services') }}
        uses: ./.github/actions/monitor-milestones-and-checkpoints
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}
          args_filename: ${{ matrix.file.path }}

      - name: Post kurtosis run
        if: always()
        uses: ./.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}
          args_filename: ${{ matrix.file.name }}

  run-with-stateless:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      # Try to free up disk space (around 6 GB) before running the kurtosis job.
      # This is needed because the job fails with "System.IO.IOException: No space left on device".
      - name: Free disk space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # 2023/10/19
        with:
          tool-cache: true

      - name: Pre kurtosis run
        uses: ./.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

      - name: Build local bor image
        run: |
          bor_branch="develop"
          bor_commit_sha="e3c09a2" # 2025/09/03
          image_name="local/bor:${bor_commit_sha}"
          git clone --branch "${bor_branch}" https://github.com/maticnetwork/bor.git
          pushd bor
          git checkout "${bor_commit_sha}"
          docker build --tag "${image_name}" .

      - name: Build local heimdall-v2 image
        run: |
          heimdall_v2_branch="develop"
          heimdall_v2_commit_sha="82ead2c" # 2025/09/03
          image_name="local/heimdall-v2:${heimdall_v2_commit_sha}"
          git clone --branch "${heimdall_v2_branch}" https://github.com/0xPolygon/heimdall-v2.git
          pushd heimdall-v2
          git checkout "${heimdall_v2_commit_sha}"
          docker build --tag "${image_name}" .

      - name: Kurtosis run
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=.github/configs/stateless.yml .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Check if test runner is deployed
        id: check-test-runner
        run: |
          # The test runner is deployed by default.
          test_runner_deployed=true

          # Verify if additional services are defined and ensure the test runner is deployed.
          additional_services=$(yq '.polygon_pos_package.additional_services' .github/configs/stateless.yml)
          if [[ "${additional_services}" != "null" ]]; then
            is_test_runner_deployed=$(yq '.polygon_pos_package.additional_services | contains(["test_runner"])' .github/configs/stateless.yml)
            if [[ "${is_test_runner_deployed}" != "true" ]]; then
              test_runner_deployed=false
            fi
          fi
          echo "test_runner_deployed=${test_runner_deployed}" >> $GITHUB_OUTPUT

      - name: Test state syncs
        if: steps.check-test-runner.outputs.test_runner_deployed == 'true'
        run: kurtosis service exec ${{ env.ENCLAVE_NAME }} test-runner "bats --filter-tags pos,bridge,matic,pol --recursive tests/"

      - name: Post kurtosis run
        if: always()
        uses: ./.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.ENCLAVE_NAME }}
          args_filename: stateless
